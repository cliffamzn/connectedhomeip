/*
*
*    Copyright (c) 2023 Project CHIP Authors
*    All rights reserved.
*
*    Licensed under the Apache License, Version 2.0 (the "License");
*    you may not use this file except in compliance with the License.
*    You may obtain a copy of the License at
*
*        http://www.apache.org/licenses/LICENSE-2.0
*
*    Unless required by applicable law or agreed to in writing, software
*    distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*    See the License for the specific language governing permissions and
*    limitations under the License.
*/

#pragma once

#include <app/AttributeAccessInterface.h>
#include <app/clusters/resource-monitoring-server/resource-monitoring-delegate.h>
#include <app/util/af.h>
#include <map>

namespace chip {
namespace app {
namespace Clusters {
namespace ResourceMonitoring {

// todo have this list be generated by zap.
const std::array<ClusterId , 12> AliasedClusters = {0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007a,0x007b,0x007c};

class Instance : public CommandHandlerInterface, public AttributeAccessInterface
{

public:
    // This map holds pointers to all initialised Resource Monitoring instances. It provides a way to access all Resource Monitoring clusters.
    static std::map<uint32_t, Instance*> ResourceMonitoringAliasesInstanceMap;

    CHIP_ERROR Init();

    // CommandHandlerInterface
    void InvokeCommand(HandlerContext & ctx) override;
    CHIP_ERROR EnumerateAcceptedCommands(const ConcreteClusterPath & cluster, CommandIdCallback callback, void * context) override;

    // Checks if this instance supports a feature
    bool HasFeature(HepaFilterMonitoring::Feature feature) const;

    // AttributeAccessInterface
    CHIP_ERROR Read(const ConcreteReadAttributePath & aPath, AttributeValueEncoder & aEncoder) override;
    CHIP_ERROR Write(const ConcreteDataAttributePath & aPath, AttributeValueDecoder & aDecoder) override;

    // Generic accessor functions
    EmberAfStatus GetFeature(uint32_t * value) const;
    EmberAfStatus SetFeatureMap(uint32_t value) const;
   

private:
    EndpointId endpointId{};
    ClusterId clusterId{};
    Delegate * delegate;

    void HandleResetCondition(HandlerContext & ctx, const HepaFilterMonitoring::Commands::ResetCondition::DecodableType & commandData);
    
public:
    /**
     * Creates a mode select cluster instance. The Init() function needs to be called for this instance to be registered and
     * called by the interaction model at the appropriate times.
     * @param aEndpointId The endpoint on which this cluster exists. This must match the zap configuration.
     * @param aClusterId The ID of the ResourceMonitoring aliased cluster to be instantiated.
     * @param aDelegate A pointer to a delegate that will handle application layer logic.
     */
    Instance(EndpointId aEndpointId, ClusterId aClusterId, Delegate * aDelegate) :
        CommandHandlerInterface(Optional<EndpointId>(aEndpointId), aClusterId),
        AttributeAccessInterface(Optional<EndpointId>(aEndpointId), aClusterId), 
        delegate(aDelegate)
    {
        endpointId = aEndpointId;
        clusterId  = aClusterId;
        delegate   = aDelegate;
    }

    ~Instance() override
    {
        ResourceMonitoringAliasesInstanceMap.erase(clusterId);
    }

    template <typename RequestT, typename FuncT>
    void HandleCommand(HandlerContext & handlerContext, FuncT func);
};

} // namespace ResourceMonitoring
} // namespace Clusters
} // namespace app
} // namespace chip